-- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
SELECT *
  FROM GENERATE_SERIES(0, 5, 1) AS ascending_seq;

SELECT *
  FROM GENERATE_SERIES(10, 0, -2) AS descending_seq;

SELECT GENERATE_SERIES(10, 0, -2) AS descending_seq;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
SELECT GENERATE_SERIES(0.1, 5, 1)    AS seq_1,
       GENERATE_SERIES(15, 0, -2.41) AS seq_2;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
SELECT 'order_' || GENERATE_SERIES(1, 5) AS orders;

SELECT CHR(ASCII('A') + GENERATE_SERIES(0, 4))    AS eng,
       CHR(ASCII('–Ø') - GENERATE_SERIES(0, 8, 2)) AS rus,
       CHR(ASCII('üë©') + GENERATE_SERIES(0, 4))    AS smile;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è
SELECT *
  FROM GENERATE_SERIES('2023-05-01 00:00'::TIMESTAMP, '2023-05-03 12:00', '12 hours') AS time_series;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã
SELECT '2023-05-01'::DATE + GENERATE_SERIES(0, 5) AS dates;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (–∑–∞ —Å—á–µ—Ç –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ FROM)
SELECT CHR(ASCII('A') + a) AS first_level,
       b                   AS second_level
  FROM GENERATE_SERIES(0, 2, 1) AS a,
       GENERATE_SERIES(10, 13, 1) AS b;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º
SELECT ROUND(RANDOM() * 100) AS random_value
  FROM GENERATE_SERIES(1, 5, 1) AS seq;

SELECT CHR(ASCII('A') + ROUND(RANDOM() * 26)::INTEGER) AS random_letter
  FROM GENERATE_SERIES(1, 5, 1) AS seq;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫—É
SELECT STRING_AGG(CHR(65 + FLOOR(RANDOM() * 26)::INTEGER), '') AS random_letter
  FROM GENERATE_SERIES(1, 10) AS num_letters;

-- –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
SELECT number_of_rows,
       STRING_AGG(CHR(65 + FLOOR(RANDOM() * 26)::INTEGER), '') AS random_letters
  FROM GENERATE_SERIES(1, 5) AS number_of_rows,
       GENERATE_SERIES(1, 10) AS num_of_letters
 GROUP BY number_of_rows;

-- –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
SELECT STRING_AGG(CHR(65 + FLOOR(RANDOM() * 26)::INTEGER), '') AS random_letters
  FROM GENERATE_SERIES(1, 10) AS num_of_letters
 GROUP BY GENERATE_SERIES(1, 5);

-- —Ç–æ–∂–µ —Å–∞–º–æ–µ –Ω–æ –Ω–∞–≥–ª—è–¥–Ω–µ–µ
SELECT STRING_AGG(CHR(65 + FLOOR(RANDOM() * 26)::INTEGER), '') AS random_letters
  FROM GENERATE_SERIES(1, 5) AS series1,
       GENERATE_SERIES(1, 10) AS series2
 GROUP BY series1;

-- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞—Ç
SELECT '2023-05-01 00:00'::TIMESTAMP + RANDOM() * ('24 hours'::INTERVAL) AS random_time
  FROM GENERATE_SERIES(1, 5);

SELECT '2023-05-01'::DATE + ROUND(RANDOM() * 10) * ('24 hours'::INTERVAL) AS random_time
  FROM GENERATE_SERIES(1, 10);

SELECT '2023-05-01'::DATE + RANDOM() * 10 * ('24 hours'::INTERVAL) AS random_time
  FROM GENERATE_SERIES(1, 10);

-- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∞–≥—Ä–µ–∞—Ü–∏–∏
SELECT movie_year, COUNT(m.film_id) AS movie_num
  FROM GENERATE_SERIES(2000, 2010, 1) AS movie_year
           LEFT JOIN movie AS m ON movie_year = m.release_year
-- –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–∞—Ö
 GROUP BY movie_year
-- —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞
 ORDER BY movie_year;
-- –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞

-- —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç
SELECT '2023-08-01'::DATE + GENERATE_SERIES(0, 31, 3) AS stat_date;
-- –∏–ª–∏
SELECT GENERATE_SERIES('2023-08-01'::DATE, '2023-08-31', '3 days')::DATE AS stat_date

-- —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SELECT SETSEED(0);
SELECT STRING_AGG(CHR(ASCII('A') + FLOOR(RANDOM() * 26)::INTEGER), '') AS user_id,
       '2023-08-20'::DATE + ROUND(RANDOM() * 10)::INTEGER              AS reg_dt
  FROM GENERATE_SERIES(1, 6) AS char_num,
       GENERATE_SERIES(1, 50) AS line_num
 GROUP BY line_num;

-- —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
SELECT check_date::DATE,
       CASE
           WHEN SUM(invoice.total) IS NULL THEN 0
           ELSE SUM(invoice.total)
           END AS total_sum
  FROM GENERATE_SERIES('2013-11-01'::DATE, '2013-11-30', '1 day') AS check_date
           LEFT JOIN invoice ON check_date = invoice.invoice_date::DATE
 GROUP BY check_date
 ORDER BY check_date;
